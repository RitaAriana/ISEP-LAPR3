@startuml
'https://plantuml.com/class-diagram

skinparam classAttributeIconSize 0



class GetShortestPathsUI {}


class GetShortestPathsController {
-getShortestPaths(origem,destino,passagensObrigatorias);
}

class Company {
-designation
-getFreightNetwork()
}



class FreightNetwork {
-getShortestPaths(origem,destino,passagensObrigatorias);
-getLandPath(sourcePlace,destination);
-getMaritimePath(sourcePlace,destination);
-getShortPathPassingThroughNIndicatedPlaces(placesToVisite,sourcePlace,destination);
-searchNextCities(obligatoryPassage, p1, p2, checkedCities);
}

class Ports {
-identification
-name
}


class Country {
-name
-continent
}

class PlaceLocation {
-latitude
-longitude
}

class Capital{
-name
-country
-latitude
-longitude
}

class Place {

}

class Border {
-countryName1
-countryName2
}

class Seadist {
-portId1
-portId2
-seaDistance
-portName1
-portName2
-countryName1
-countryName2
}

class AdjacencyMatrixGraph {
-numVertices();
-vertex(i);
-key(i)
}

class Edge {

}

class GraphAlgorithms {
-shortestPath(adjacencyMatrixGraph,sourcePlace,destination,Double::compare,Double::sum,0.0,shortPath);
-shortestPathDijkstra(g, vOrig, ce, sum, zero, visited, pathKeys, dist);
-getPath(g, vOrig, vDest, pathKeys, shortPath);
}

GetShortestPathsUI ..> GetShortestPathsController

GetShortestPathsController ..> Company
GetShortestPathsController ..> FreightNetwork

Company "1"--"1" FreightNetwork: have >
FreightNetwork ..> AdjacencyMatrixGraph
AdjacencyMatrixGraph ..> Edge
Company "1"--"1..*" Ports: have >

Ports "2"--"*" Seadist: has a
FreightNetwork "1" -- "1..*" Place : related with
Place <|-- Capital
Place <|-- Ports
Country "2" -- "*" Border : has a
PlaceLocation "*" -- "1" Country : placed in >
Place "1" -- "1" PlaceLocation : located at >
FreightNetwork ..> GraphAlgorithms

@enduml