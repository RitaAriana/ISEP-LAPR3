package lapr.project.model;

import java.util.Date;

/**
 * Represents a summary that will be generated by the dynamic data of a journey
 * @author Manuela Leite <1200720@isep.ipp.pt>
 */

public class Summary {

    /**
     * The MMSI code of a ship
     */
    private final String mmsiCode;

    /**
     * The ships name
     */
    private final String name;

    /**
     * The date and time of starting of journey
     */
    private final Date startBaseDate;

    /**
     * The date and time of end of journey
     */
    private final Date endBaseDate;

    /**
     * The total time spend in the journey
     */
    private final String totalMovementTime;

    /**
     * The total movements made in the journey
     */
    private final int totalMovements;

    /**
     * The maximum speed over ground of a ship
     */
    private final double maximumSog;

    /**
     * The mean speed over ground of a ship
     */
    private final double meanSog;

    /**
     * The maximum course over ground of a ship
     */
    private final double maximumCog;

    /**
     * The mean course over ground of a ship
     */
    private final double meanCog;

    /**
     * The departure latitude of the journey
     */
    private final String departureLatitude;

    /**
     * The departure longitude of the journey
     */
    private final String departureLongitude;

    /**
     * The arrival latitude of the journey
     */
    private final String arrivalLatitude;

    /**
     * The arrival longitude of the journey
     */
    private final String arrivalLongitude;

    /**
     * The total distance travelled
     */
    private final double travelledDistance;

    /**
     * The delta distance of the journey
     */
    private final double deltaDistance;


    /**
     * Summary Constructor
     * @param ship the ship
     */
    public Summary(Ship ship){
        mmsiCode = ship.getMMSI();
        name = ship.getName();
        ShipLocationBST treeOfPositions = ship.getShipPosition();
        startBaseDate = treeOfPositions.getStartBase();
        endBaseDate = treeOfPositions.getEndBase();
        totalMovements = treeOfPositions.getTotalMovements();
        totalMovementTime = treeOfPositions.getTotalMovementsTime();
        maximumSog = treeOfPositions.getMaximumSog();
        meanSog = treeOfPositions.getMeanSog();
        maximumCog = treeOfPositions.getMaximumCog();
        meanCog = treeOfPositions.getMeanCog();
        departureLatitude = treeOfPositions.getLatitudeDeparture();
        departureLongitude = treeOfPositions.getLongitudeDeparture();
        arrivalLatitude = treeOfPositions.getArrivalLatitude();
        arrivalLongitude = treeOfPositions.getArrivalLongitude();
        travelledDistance = treeOfPositions.getTravelledDistance();
        deltaDistance = treeOfPositions.getDeltaDistance();

    }

    /**
     * Summary Constructor
     * @param mmsiCode the MMSI code of a ship
     * @param name the name of a ship
     * @param startBaseDate the start base date of a journey
     * @param endBaseDate the end base date of a journey
     * @param totalMovementTime the total movements time of a journey
     * @param totalMovements the total movements made in a journey
     * @param maximumSog the maximum speed over ground of a ship in a journey
     * @param meanSog the mean speed over ground of a ship in a journey
     * @param maximumCog the maximum course over ground of a ship in a journey
     * @param meanCog the mean course over ground of a ship in a journey
     * @param departureLatitude the departure latitude of the ship in a journey
     * @param departureLongitude the departure longitude of the ship in a journey
     * @param arrivalLatitude the arrival latitude of the ship in a journey
     * @param arrivalLongitude the arrival longitude of the ship in a journey
     * @param travelledDistance the travelled distance of a ship in a journey
     * @param deltaDistance the delta distance of a ship in a journey
     */
    public Summary(String mmsiCode, String name, Date startBaseDate, Date endBaseDate, String totalMovementTime, int totalMovements, double maximumSog, double meanSog, double maximumCog, double meanCog, String departureLatitude, String departureLongitude, String arrivalLatitude, String arrivalLongitude, double travelledDistance, double deltaDistance) {
        this.mmsiCode = mmsiCode;
        this.name = name;
        this.startBaseDate = startBaseDate;
        this.endBaseDate = endBaseDate;
        this.totalMovementTime = totalMovementTime;
        this.totalMovements = totalMovements;
        this.maximumSog = maximumSog;
        this.meanSog = meanSog;
        this.maximumCog = maximumCog;
        this.meanCog = meanCog;
        this.departureLatitude = departureLatitude;
        this.departureLongitude = departureLongitude;
        this.arrivalLatitude = arrivalLatitude;
        this.arrivalLongitude = arrivalLongitude;
        this.travelledDistance = travelledDistance;
        this.deltaDistance = deltaDistance;
    }

    /**
     * Get the MMSI code associated with a ship
     * @return the MMSI code
     */
    public String getMmsiCode() {
        return mmsiCode;
    }

    /**
     * Get the ships name
     * @return the ship name
     */
    public String getName() {
        return name;
    }

    /**
     * Get the date and time the ship leaves the port where the voyage began
     * @return the date of start of a journey
     */
    public Date getStartBaseDate() {
        return startBaseDate;
    }

    /**
     * Get the date and time the ship arrives at its port of destination
     * @return the date of arrival in port
     */
    public Date getEndBaseDate() {
        return endBaseDate;
    }

    /**
     * Get the total time of movements made by a ship in the travel
     * @return the total time of movements
     */
    public String getTotalMovementTime() {
        return totalMovementTime;
    }

    /**
     * Get the total number of movements made by a ship in the travel
     * @return the total number of movements
     */
    public int getTotalMovements() {
        return totalMovements;
    }

    /**
     * Get the maximum speed over ground of a ship
     * @return the maximum speed over ground
     */
    public double getMaximumSog() {
        return maximumSog;
    }

    /**
     * Get the mean speed over ground of a ship
     * @return the mean speed over ground
     */
    public double getMeanSog() {
        return meanSog;
    }

    /**
     * Get the maximum course over ground of a ship
     * @return the maximum course over ground
     */
    public double getMaximumCog() {
        return maximumCog;
    }

    /**
     * Get the mean course over ground of a ship
     * @return the mean course over ground
     */
    public double getMeanCog() {
        return meanCog;
    }

    /**
     * Get the latitude of the departure of a ship
     * @return the departure latitude
     */
    public String getDepartureLatitude() {
        return departureLatitude;
    }

    /**
     * Get the longitude of the departure of a ship
     * @return the departure longitude
     */
    public String getDepartureLongitude() {
        return departureLongitude;
    }

    /**
     * Get the latitude of the arrival of a ship
     * @return the arrival latitude
     */
    public String getArrivalLatitude() {
        return arrivalLatitude;
    }

    /**
     * Get the longitude of the arrival of a ship
     * @return the arrival longitude
     */
    public String getArrivalLongitude() {
        return arrivalLongitude;
    }

    /**
     * Get the travelled distance of a ship
     * @return the traveled distance
     */
    public double getTravelledDistance() {
        return travelledDistance;
    }

    /**
     * Get the delta distance traveled by a ship
     * @return the delta distance
     */
    public double getDeltaDistance() {
        return deltaDistance;
    }

    /**
     * @param object That is o objective of comparison
     * @return the result of the comparison
     */
    @Override
    public boolean equals(Object object){
        if(this == object)
            return true;

        if(object == null || getClass() != object.getClass())
            return false;

        else
            return this.mmsiCode.equals(((Summary) object).getMmsiCode());
    }


}
